VPATH = %VPATH%

RUSTC ?= rustc
RUSTFLAGS += -L . -L $(VPATH)/rust-phf/build

GEN_LIB_SRC = generated/char_ref_data.rs

LIB_TOP_SRC = $(VPATH)/src/html5.rs
LIB_ALL_SRC = $(GEN_LIB_SRC) $(shell find $(VPATH)/src -type f -name '*.rs')
LIB         = $(shell $(RUSTC) --crate-file-name "$(LIB_TOP_SRC)")

EXT_TEST_TOP_SRC = $(VPATH)/test/mod.rs
EXT_TEST_ALL_SRC = $(shell find $(VPATH)/test -type f -name '*.rs')

TEST_JSON_SRC = $(shell find $(VPATH)/html5lib-tests/ -type f -name '*.test')

.PHONY: all
all: $(LIB) tokenize-example

$(VPATH)/generated/char_ref_data.rs: $(VPATH)/codegen/gen-char-ref-data.py
	mkdir -p $(dir $@)
	$< $(VPATH) > $@

$(LIB): $(LIB_ALL_SRC)
	$(RUSTC) $(RUSTFLAGS) $(LIB_TOP_SRC)

tokenize-example: $(VPATH)/examples/tokenize-example.rs $(LIB)
	$(RUSTC) $(RUSTFLAGS) $<

# Workaround for mozilla/rust#13064; see preprocess-tests.py
test-json/tokenizer: $(TEST_JSON_SRC) $(VPATH)/codegen/preprocess-tests.py
	mkdir -p $@
	$(VPATH)/codegen/preprocess-tests.py $(VPATH)/html5lib-tests $@

# Run #[test] functions
html5-test: $(LIB_ALL_SRC)
	$(RUSTC) -o $@ --test $(RUSTFLAGS) $(LIB_TOP_SRC)

# Run external tests loaded from JSON
html5-external-test: $(EXT_TEST_ALL_SRC) $(LIB) test-json/tokenizer
	$(RUSTC) $(RUSTFLAGS) $(EXT_TEST_TOP_SRC)

.PHONY: check
check: check-internal check-external

.PHONY: check-internal
check-internal: html5-test
	./html5-test

.PHONY: check-external
check-external: html5-external-test
	./html5-external-test

.PHONY: clean
clean:
	rm -f *.o *.a *.so *.dylib *.dll *-test *-example
	rm -rf test-json
